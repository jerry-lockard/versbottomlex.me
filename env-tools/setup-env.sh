#!/bin/bash
# Interactive environment variables setup script
# This script will guide you through setting up your environment variables
# and save them to a .env file for use with the application.

echo "====================================================="
echo "  Environment Variables Setup"
echo "====================================================="
echo 
echo "This script will help you configure all necessary environment"
echo "variables for your application. Just answer the prompts,"
echo "and a .env file will be created with your settings."
echo
echo "Press Enter to use the default values shown in [brackets]."
echo "====================================================="
echo

# Function to prompt for a variable with a default value
prompt_var() {
  local VAR_NAME=$1
  local DESCRIPTION=$2
  local DEFAULT_VALUE=$3
  local SENSITIVE=$4
  
  echo
  echo "$DESCRIPTION"
  if [ "$SENSITIVE" = "true" ]; then
    read -p "$VAR_NAME [$DEFAULT_VALUE]: " -s INPUT
    echo
  else
    read -p "$VAR_NAME [$DEFAULT_VALUE]: " INPUT
  fi
  
  # Use default if input is empty
  if [ -z "$INPUT" ]; then
    echo "$VAR_NAME=$DEFAULT_VALUE" >> .env
    echo "Using default: $DEFAULT_VALUE"
  else
    echo "$VAR_NAME=$INPUT" >> .env
    if [ "$SENSITIVE" = "true" ]; then
      echo "Value set (hidden)"
    else
      echo "Value set: $INPUT"
    fi
  fi
}

# Create new .env file (or backup existing one)
if [ -f .env ]; then
  echo "Existing .env file found. Creating backup as .env.backup"
  cp .env .env.backup
  > .env
else
  > .env
fi

echo "# Environment Variables - Created $(date)" > .env
echo "# Configure these values for your specific deployment" >> .env
echo "" >> .env

echo "====================================================="
echo "CORE SETTINGS"
echo "====================================================="

prompt_var "APP_NAME" "Application name (used for container naming)" "myapp" "false"
prompt_var "PRIMARY_DOMAIN" "Main domain name for your application" "example.com" "false"
prompt_var "ADMIN_EMAIL" "Administrator email (for certificates/notifications)" "admin@example.com" "false"

echo "====================================================="
echo "DATABASE CONFIGURATION"
echo "====================================================="

prompt_var "DB_HOST" "Database host address" "localhost" "false"
prompt_var "DB_PORT" "Database port" "5432" "false"
prompt_var "DB_NAME" "Database name" "app_database" "false"
prompt_var "DB_USER" "Database username" "postgres" "false"
prompt_var "DB_PASSWORD" "Database password (hidden input)" "postgres" "true"

echo "====================================================="
echo "API CONFIGURATION"
echo "====================================================="

prompt_var "API_HOST" "API host address" "localhost" "false"
prompt_var "API_PORT" "API port" "5000" "false"
prompt_var "FRONTEND_URL" "Frontend URL (for CORS)" "http://localhost:3000" "false"

echo "====================================================="
echo "MEDIA/STREAMING CONFIGURATION"
echo "====================================================="

prompt_var "MEDIA_HOST" "Media streaming host" "localhost" "false"
prompt_var "MEDIA_PORT" "Media streaming port" "8888" "false"

echo "====================================================="
echo "SECURITY"
echo "====================================================="

# Generate random secure strings for secrets if needed
RANDOM_JWT=$(openssl rand -hex 32)
RANDOM_REFRESH=$(openssl rand -hex 32)

prompt_var "JWT_SECRET" "JWT secret key (hidden input, randomly generated by default)" "$RANDOM_JWT" "true"
prompt_var "JWT_REFRESH_SECRET" "JWT refresh token secret (hidden input, randomly generated by default)" "$RANDOM_REFRESH" "true"
prompt_var "JWT_EXPIRES_IN" "JWT token expiration time" "15m" "false"
prompt_var "JWT_REFRESH_EXPIRES_IN" "JWT refresh token expiration time" "7d" "false"
prompt_var "JWT_ISSUER" "JWT issuer (typically your domain)" "example.com" "false"
prompt_var "JWT_AUDIENCE" "JWT audience (API identifier)" "app-api" "false"

echo "====================================================="
echo "FRONTEND CONFIGURATION"
echo "====================================================="

prompt_var "APP_ROOT" "Root directory for web files in Nginx" "/usr/share/nginx/html" "false"

echo "====================================================="
echo "ENVIRONMENT-SPECIFIC URLs"
echo "====================================================="

echo "" >> .env
echo "# Development environment URLs" >> .env
prompt_var "DEV_API_URL" "Development API URL" "http://localhost:3000/api" "false"
prompt_var "DEV_SOCKET_URL" "Development Socket URL" "http://localhost:3000" "false"
prompt_var "DEV_RTMP_URL" "Development RTMP URL" "rtmp://localhost/live" "false"

echo "" >> .env
echo "# Staging environment URLs" >> .env
prompt_var "STAGING_API_URL" "Staging API URL" "https://staging-api.example.com/api" "false"
prompt_var "STAGING_SOCKET_URL" "Staging Socket URL" "https://staging-api.example.com" "false"
prompt_var "STAGING_RTMP_URL" "Staging RTMP URL" "rtmp://staging-stream.example.com/live" "false"

echo "" >> .env
echo "# Production environment URLs" >> .env
prompt_var "PROD_API_URL" "Production API URL" "https://api.example.com/api" "false"
prompt_var "PROD_SOCKET_URL" "Production Socket URL" "https://api.example.com" "false"
prompt_var "PROD_RTMP_URL" "Production RTMP URL" "rtmp://stream.example.com/live" "false"

echo "====================================================="
echo "CONFIGURATION COMPLETE!"
echo "====================================================="
echo
echo "Your environment variables have been saved to: .env"
echo
echo "Next steps:"
echo "1. Review the .env file to ensure all values are correct"
echo "2. Use 'docker-compose up -d' to start your application"
echo "3. For SSL setup: sudo -E bash scripts/ssl-setup.sh"
echo
echo "Thank you for using the setup script!"
echo "====================================================="

# Make the script executable if it isn't already
chmod +x setup-env.sh